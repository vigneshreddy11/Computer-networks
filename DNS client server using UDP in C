#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#define SERVER_PORT 53
#define BUFFER_SIZE 1024
struct DNSHeader {
    uint16_t ID;
    uint16_t FLAGS;
    uint16_t QDCOUNT;
    uint16_t ANCOUNT;
    uint16_t NSCOUNT;
    uint16_t ARCOUNT;
};
struct DNSQuestion {
    uint16_t QTYPE;
    uint16_t QCLASS;
};
void handleDNSQuery(int sockfd, const char *query) {
    struct DNSHeader *header = (struct DNSHeader *)query;
    uint16_t qtype = ntohs(((struct DNSQuestion *)(query + sizeof(struct DNSHeader) + strlen(query + sizeof(struct DNSHeader)) + 1))->QTYPE;
    char response[BUFFER_SIZE];
    memset(response, 0, BUFFER_SIZE);
    struct DNSHeader *responseHeader = (struct DNSHeader *)response;
    responseHeader->ID = header->ID;
    responseHeader->FLAGS = htons(0x8180); // Response, No Error
    responseHeader->QDCOUNT = header->QDCOUNT;
    responseHeader->ANCOUNT = htons(1);
    responseHeader->NSCOUNT = 0;
    responseHeader->ARCOUNT = 0;
    strcpy(response + sizeof(struct DNSHeader), query + sizeof(struct DNSHeader));
    strcpy(response + sizeof(struct DNSHeader) + strlen(query + sizeof(struct DNSHeader)) + 1, query + sizeof(struct DNSHeader));
    *(uint16_t *)(response + sizeof(struct DNSHeader) + strlen(query + sizeof(struct DNSHeader)) + 1 + strlen(query + sizeof(struct DNSHeader)) + 1) = htons(qtype);
    *(uint16_t *)(response + sizeof(struct DNSHeader) + strlen(query + sizeof(struct DNSHeader)) + 1 + strlen(query + sizeof(struct DNSHeader)) + 1 + sizeof(uint16_t)) = htons(1); // Class: IN
    sendto(sockfd, response, sizeof(struct DNSHeader) + strlen(query + sizeof(struct DNSHeader)) + 1 + strlen(query + sizeof(struct DNSHeader)) + 1 + sizeof(uint16_t) + sizeof(uint16_t), 0, (struct sockaddr *)&client_addr, client_len);
}
int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(SERVER_PORT);
    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error binding socket");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    printf("DNS server listening on port %d...\n", SERVER_PORT);
    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);
        if (bytes_received < 0) {
            perror("Error receiving data");
            continue;
        }
        printf("Received DNS query from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
        handleDNSQuery(sockfd, buffer);
    }
    close(sockfd);
    return 0;
}
**********************************************************************************
client code:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 53
#define BUFFER_SIZE 1024
struct DNSHeader {
    uint16_t ID;
    uint16_t FLAGS;
    uint16_t QDCOUNT;
    uint16_t ANCOUNT;
    uint16_t NSCOUNT;
    uint16_t ARCOUNT;
};
struct DNSQuestion {
    uint16_t QTYPE;
    uint16_t QCLASS;
};
void printDNSResponse(const char *response) {
    struct DNSHeader *header = (struct DNSHeader *)response;
    const char *answer = response + sizeof(struct DNSHeader) + strlen(response + sizeof(struct DNSHeader)) + 1 + sizeof(uint16_t) + sizeof(uint16_t);
    printf("DNS Response:\n");
    printf("ID: %04X\n", ntohs(header->ID));
    printf("Flags: %04X\n", ntohs(header->FLAGS));
    printf("QDCOUNT: %d\n", ntohs(header->QDCOUNT));
    printf("ANCOUNT: %d\n", ntohs(header->ANCOUNT));
    printf("Answer:\n");
    printf("Name: %s\n", answer);
    printf("Type: %04X\n", ntohs(*(uint16_t *)(answer + strlen(answer) + 1)));
    printf("Class: %04X\n", ntohs(*(uint16_t *)(answer + strlen(answer) + 1 + sizeof(uint16_t))));
    printf("TTL: %d\n", ntohl(*(uint32_t *)(answer + strlen(answer) + 1 + sizeof(uint16_t) + sizeof(uint16_t))));
    printf("RDLength: %d\n", ntohs(*(uint16_t *)(answer + strlen(answer) + 1 + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t))));
    printf("RData: %s\n", answer + strlen(answer) + 1 + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + sizeof(uint16_t));
    printf("\n");
}
int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        perror("Invalid address");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    char query[BUFFER_SIZE];
    memset(query, 0, BUFFER_SIZE);
    struct DNSHeader *queryHeader = (struct DNSHeader *)query;
    queryHeader->ID = htons(0x1234);
    queryHeader->FLAGS = htons(0x0100); // Standard query
    queryHeader->QDCOUNT = htons(1);
    queryHeader->ANCOUNT = 0;
    queryHeader->NSCOUNT = 0;
    queryHeader->ARCOUNT = 0;
    strcpy(query + sizeof(struct DNSHeader), "www.example.com");
    *(uint16_t *)(query + sizeof(struct DNSHeader) + strlen("www.example.com") + 1) = htons(1); // Type: A
    *(uint16_t *)(query + sizeof(struct DNSHeader) + strlen("www.example.com") + 1 + sizeof(uint16_t)) = htons(1); // Class: IN
    if (sendto(sockfd, query, sizeof(struct DNSHeader) + strlen("www.example.com") + 1 + sizeof(uint16_t) + sizeof(uint16_t), 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error sending data");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    printf("DNS query sent to server %s:%d\n", SERVER_IP, SERVER_PORT);
    memset(buffer, 0, BUFFER_SIZE);
    int bytes_received = recv(sockfd, buffer, BUFFER_SIZE, 0);
    if (bytes_received < 0) {
        perror("Error receiving data");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    printf("Received DNS response from server %s:%d\n", SERVER_IP, SERVER_PORT);
    printDNSResponse(buffer);
    close(sockfd);
    return 0;
}
*********************************************************************************
